I want to design a game, I would like to do it using library pygame (I have everything setup for this already), I want to start in Pycharm Community edition using: if __name__ == "__main__": main() I want a single python file as output.

Description of game:
Py-Man: Core Design & Technical Specification
Version: 1.0

1. Core Gameplay Loop
The player navigates a character (Py-Man) through a static maze. The goal is to clear the maze by eating all the pellets scattered throughout. The player is pursued by four ghosts, each with a unique AI personality. Eating a large "Power Pellet" temporarily makes the ghosts vulnerable, allowing Py-Man to eat them for bonus points. Clearing the maze advances the player to the next level.

2. Game Rules & Logic
Player (Py-Man):

Moves at a constant speed in one of four directions.
Movement is continuous, not strictly tile-by-tile. Turns are only possible at intersections.
Input Buffering: Player input for a turn should be registered before reaching an intersection and executed automatically upon arrival.
Pellets & Maze:

Standard Pellets: Small dots. Eating one grants 10 points.
Power Pellets: Four large, flashing dots located in the corners of the maze. Eating one grants 50 points and triggers the ghosts' "Frightened" mode.
Win Condition: The level is won when all Standard and Power Pellets are eaten.
Ghosts (The Core AI Challenge):

Each of the four ghosts has three primary modes: Chase, Scatter, and Frightened. The game alternates between Chase and Scatter modes on a timer.
1. Chase Mode (Default Behavior): Each ghost targets a specific tile based on its personality.
Blinky (Red): Targets Py-Man's exact tile. The aggressive pursuer.
Pinky (Pink): Targets 4 tiles ahead of Py-Man's current direction. The ambusher.
Inky (Cyan): Targets a tile calculated using both Py-Man's and Blinky's positions. The unpredictable flanker.
Clyde (Orange): Targets Py-Man's tile, but if he gets within an 8-tile radius, he retreats to his "scatter" corner. The timid one.
2. Scatter Mode: Ghosts temporarily ignore Py-Man and head towards their designated home corner of the maze. This provides a brief respite for the player.
3. Frightened Mode: Triggered by eating a Power Pellet.
Ghosts turn dark blue and move randomly at a slower speed.
Py-Man can eat them during this phase. After being eaten, a ghost's "eyes" return to the central ghost pen to respawn.
The score for eating ghosts in a single Frightened phase is 200, 400, 800, 1600.
Lives & Game Over:

Player starts with 3 lives.
A life is lost if Py-Man collides with a ghost that is not in Frightened mode.
When a life is lost, the level resets positions, but the pellet state is preserved.
The game is over when all lives are lost.
3. Controls
Movement: Arrow Keys or W, A, S, D
Start Game: Enter
Pause / Resume: P
Quit Game: Escape
4. Game States & Flow
The game requires management of multiple states for a smooth player experience:

Start Screen: Displays title, "Press Enter". Plays intro music.
Level Start: Displays "READY!" on the maze before gameplay begins.
Gameplay: The main interactive state. Player and ghosts are active.
Player Dying: A brief, non-interactive state triggered on collision. Play a death animation/sound, decrement a life, and transition back to Level Start.
Level Cleared: A brief, non-interactive state triggered by clearing all pellets. Flash the maze walls, then load the next level and transition to Level Start.
Game Over: Final state when lives run out. Display "GAME OVER" and final score.
5. UI & Visuals
Aesthetic: Iconic, 8-bit arcade style. Neon colors on a black background.
Sprites:
Py-Man: Yellow circle with an animated mouth (sprite sheet).
Ghosts: Unique colors (Red, Pink, Cyan, Orange) with animated bodies and eyes that indicate their direction of movement.
Frightened Ghost: A single dark blue sprite, flashing to white near the end of the timer.
Eaten Ghost: An "eyes only" sprite for returning to the pen.
HUD:
Top: Current Score | High Score.
Bottom: Lives remaining (represented by Py-Man icons) | Level Fruit Indicator (displays fruits earned on previous levels).
6. Pygame Technical Specifications
Display: A classic 4:3 aspect ratio is ideal (e.g., 600x800), but a fixed size like 800x800 is acceptable.
Movement System:
The maze is a tile-based grid for logic, but movement rendering is continuous.
The core logic will be pathfinding. Ghosts need an algorithm (like A* or Breadth-First Search) to find the shortest path to their target tile.
Level Data:
The maze layout should be loaded from a .txt file, using characters to define walls, pellet locations, power pellet locations, the ghost pen, and spawn points.
AI Implementation:
Each ghost must be an object with its own state machine to handle Chase, Scatter, Frightened, and Eaten states.
A global game timer will dictate the switch between Chase and Scatter modes.
Assets: This project requires external assets:
Sprite Sheets: For all character animations.
Sound Files (.wav or .ogg): For game start music, pellet chomping (waka-waka), eating a ghost, player death, and Power Pellet effect.