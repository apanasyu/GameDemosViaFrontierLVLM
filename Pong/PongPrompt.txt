I want to design a game, I would like to do it using library pygame (I have everything setup for this already), I want to start in Pycharm Community edition using: if __name__ == "__main__": main() I want a single python file as output.

Description of game:
PyPong: Core Design & Technical Specification
Version: 1.0

1. Core Gameplay Loop
PyPong is a 2D sports arcade game simulating table tennis. Two players each control a paddle on opposite sides of the screen. They must deflect a moving ball to prevent it from passing them. A point is scored when a player fails to return the ball. The first player to reach a set score wins. Randomly spawning power-ups introduce strategic variation.

2. Game Rules & Logic
Paddles:

Movement is restricted to the vertical axis.
Paddles cannot move past the top or bottom screen boundaries.
The game supports Player vs. AI and Player vs. Player modes.
Ball Physics (The Core Algorithm):

The ball moves at a constant velocity, stored as (vx, vy).
Collision with Top/Bottom Walls: The ball's vertical velocity is inverted (vy = -vy).
Collision with Paddles: The ball's horizontal velocity is inverted (vx = -vx).
Bounce Angle: The vertical velocity (vy) should be adjusted based on where the ball strikes the paddle. Hitting the center results in a flatter angle (vy close to 0), while hitting the edges results in a steeper angle (vy is larger).
Speed Up: To prevent stale gameplay, the ball's overall speed should increase slightly after each successful paddle hit.
Scoring: A point is awarded to the opponent if the ball moves past a player's paddle (i.e., ball.x < 0 or ball.x > screen_width).
Serve: After a point is scored, the ball resets at the center of the screen and serves towards the player who just conceded the point after a brief delay.
Power-Ups (The Twist):

Spawning: A power-up appears at a random location on the screen at random intervals (e.g., every 8-15 seconds). It disappears if not collected within a set time.
Activation: Activated when the ball collides with the power-up icon. The effect is applied to the player who last hit the ball.
Types & Effects (Timed Duration: ~7 seconds):
Paddle Grow: Increases the length of the player's paddle.
Paddle Shrink: Decreases the length of the opponent's paddle.
Speed Boost: Significantly increases the ball's current speed.
Visual Cue: An active power-up should be visually indicated (e.g., the affected paddle glows).
Win Condition:

The first player to score 7 points wins the game.
3. Controls
Player 1 (Left Paddle): W (Up), S (Down)
Player 2 / AI (Right Paddle): Up Arrow (Up), Down Arrow (Down)
Start / Restart: Enter
Pause / Resume: P
4. Game States & Flow
Main Menu → Serve → Gameplay → Game Over

Main Menu: Displays title, controls, and "Press Enter to Play".
Serve State: A 2-second pause after a point is scored. Displays current scores before resuming play.
Gameplay: The main real-time rally state where all physics and controls are active.
Game Over: Freezes gameplay. Displays "PLAYER 1 WINS!" or "PLAYER 2 WINS!", the final score, and a prompt to restart.
5. UI & Visuals
Aesthetic: Classic arcade minimalism. High-contrast black and white is standard.
Game Elements:
Paddles & Ball: Simple white rectangles (pygame.Rect).
Center Line: A dashed vertical line in the middle of the screen.
Power-up Icons: Distinctly colored shapes or letters to identify them (e.g., a green G for Grow, a red S for Shrink).
HUD:
The score for each player is displayed as large numbers on their respective sides of the screen.
6. Pygame Technical Specifications
Display:
Window Size: 1024 x 768 or similar 4:3 aspect ratio.
Game Objects:
Use pygame.Rect objects for the ball and paddles. This simplifies collision detection (colliderect) and drawing.
Physics Implementation:
Ball's position and velocity should be stored as floating-point numbers for smooth movement, but rendered at integer coordinates.
vx and vy represent pixels-per-second movement, scaled by delta_time in the game loop for framerate independence.
AI Logic (Simple):
The AI paddle's center y coordinate attempts to track the ball's y coordinate.
To make it beatable, give the AI a maximum movement speed that is slightly slower than the player's or introduce a small reaction delay.
Power-up Management:
Maintain a list of active power-ups. Each power-up object should have a timer. The game loop checks these timers each frame to revert effects when they expire.