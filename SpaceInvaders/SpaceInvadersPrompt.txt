I want to design a game, I would like to do it using library pygame (I have everything setup for this already), I want to start in Pycharm Community edition using: if __name__ == "__main__": main() I want a single python file as output.

Description of game:
PyVaders: Core Design & Technical Specification
Version: 1.0

1. Core Gameplay Loop
The player controls a laser cannon at the bottom of the screen, moving horizontally. The objective is to shoot and destroy descending waves of aliens organized in a rectangular formation. Aliens march back and forth, moving lower each time they reach the screen's edge. The player must clear the wave before any alien reaches the bottom, while dodging enemy fire and using destructible shields for cover.

2. Game Rules & Logic
Player Cannon:
Moves horizontally along the bottom of the screen.
Can have only one laser bolt on-screen at a time.
Starts with 3 lives. Loses a life if hit by an alien bolt.
Invader Swarm (The Core Mechanic):
A grid of aliens (e.g., 5 rows of 11) moves as a single entity.
Movement Pattern: The swarm moves horizontally. When the outermost alien on the moving side touches the screen edge, the entire swarm:
Moves down by a fixed step.
Reverses its horizontal direction.
Speed Increase: The swarm's movement speed (and the accompanying "thump" sound) increases as more aliens are destroyed. This is a critical feature for building tension.
Shooting: At random intervals, aliens in the bottom-most row of the swarm will fire a laser bolt downwards.
Destructible Shields:
Several stationary shields are positioned between the player and the aliens.
Both player and alien laser bolts will destroy parts of the shields upon impact.
Mystery Ship (UFO):
Periodically, a special red UFO will fly quickly across the top of the screen.
Destroying it awards a high, random number of bonus points.
Win/Loss Conditions:
Wave Cleared (Win): Destroy all aliens in the swarm. The game proceeds to the next, faster wave.
Game Over (Loss):
The player loses all their lives.
Any alien in the swarm reaches the same vertical level as the player's cannon.
3. Controls
Move Left: Left Arrow or A
Move Right: Right Arrow or D
Shoot: Spacebar
Pause / Resume: P
Quit Game: Escape
4. Game States & Flow
Main Menu → Gameplay ↔ Paused → Game Over

Main Menu: Displays title, high score, and "Press Space to Start".
Gameplay: The active game state. Manages player, aliens, bullets, and shields.
Wave Transition: A brief 1-2 second pause after clearing a wave to display "WAVE X" before spawning the next swarm.
Game Over: Freezes the game and displays "GAME OVER" with the final score.
5. UI & Visuals
Aesthetic: Iconic, 8-bit pixel art against a black void.
Sprites / Graphics:
Player Cannon: Green.
Player Laser: A simple vertical line or thin rectangle.
Invaders: At least 3 distinct alien sprites, one for each row type. Typically white or multi-colored.
Alien Laser: A visually distinct "bolt" sprite.
Shields: Green, blocky structures that visibly degrade.
UFO: Red, saucer-shaped sprite.
Animations:
Invaders should have a simple 2-frame animation (e.g., arms up/down) that toggles on each movement step.
Explosion sprites for when the player or aliens are hit.
HUD:
Positioned at the top or bottom of the screen, outside the play area.
Left: "SCORE: [value]" and "HIGH SCORE: [value]"
Right: "LIVES: " followed by small player cannon icons representing lives remaining.
6. Pygame Technical Specifications
Display:
Window Size: A portrait aspect ratio is traditional, e.g., 600px width x 800px height.
Play Area: The main game area, leaving space for the HUD.
Game Loop:
Real-time: The game must be managed by a main loop with a fixed framerate (e.g., 60 FPS using pygame.time.Clock).
Invader Movement: The swarm's movement should be tick-based, not per-frame. A timer event (pygame.time.set_timer) or a simple counter in the main loop can trigger a swarm update. The delay between ticks decreases as aliens are destroyed.
Collision Detection:
pygame.Rect.colliderect() is sufficient for most collisions (bullet-to-player, bullet-to-alien).
Shield Degradation: For pixel-perfect shield damage, use pygame.mask.Mask collision between the bullet's rect and the shield's mask. When a collision occurs, "erase" pixels from the shield's Surface.
Key Data Structures:
A list of Alien objects or a 2D list to manage the swarm.
A pygame.sprite.Group for all active sprites is highly recommended.
Separate lists or sprite groups for player bullets and alien bullets.