I want to design a game, I would like to do it using library pygame (I have everything setup for this already), I want to start in Pycharm Community edition using: if __name__ == "__main__": main(). I want a single python file as output.

Description of game:
PyMemo: Core Design & Technical Specification
Version: 1.0

1. Core Gameplay Loop
PyMemo is a tile-based memory game. A grid of matching card pairs is presented face-down. The player flips over two cards per turn by clicking on them. If the cards match, they are removed or remain face-up. If they do not match, they are flipped back face-down after a brief delay. The objective is to find all the matching pairs.

2. Game Rules & Logic
Game Setup:

Define a set of unique pairs (e.g., 8 unique images for a 4x4 grid).
Create a list containing two of each unique item.
Shuffle this list thoroughly to randomize the card positions.
Assign the shuffled items to the grid locations.
Turn Logic (The Core State Machine):

State: Zero Cards Flipped: The game waits for the player to click a face-down card.
State: One Card Flipped: The player clicks a card, and it is revealed. The game now waits for a second click on a different, face-down card.
State: Two Cards Flipped: The second card is revealed. The game logic now takes over:
If Match: The two cards are marked as "solved" and remain permanently face-up. Increment the "Pairs Found" counter. The turn is over.
If No Match: A short timer (e.g., 1 second) is initiated. After the timer expires, both cards are flipped back to their face-down state. The turn is over.
Win Condition:

The game is won when all cards have been successfully matched and are in the "solved" state.
3. Controls
Primary Action: Left Mouse Click to select and flip a card.
Restart Game: R key or an on-screen button.
Quit Game: Escape
4. Game States & Flow
The game operates across three main states:

Gameplay: The main interactive state where the player is actively trying to find pairs. This is the default state on launch.
Animation/Pause: A brief, non-interactive state after a non-matching pair is revealed. The game waits for a timer to complete before flipping the cards back. Player input is ignored during this time.
Win Screen: Triggered by the win condition. Displays stats and a "Play Again" prompt/button.
5. UI & Visuals
Aesthetic: Clean, clear, and intuitive. Graphics should not distract from the memory task.
Card States (Critical Visuals):
Face-Down: A uniform design for all cards (e.g., a solid color with a question mark or logo).
Face-Up (Revealed): Shows the unique symbol/icon/image for that card.
Solved/Matched: The card remains face-up but can be visually altered to show it's "out of play" (e.g., semi-transparent, grayed out, or a colored border).
Animation (Key Feature):
Card Flip: Implement a simple 2D flip animation. This can be achieved by horizontally shrinking the card's rectangle to zero, changing the card's image (from back to front, or vice-versa), and then expanding it back to its full width.
HUD / On-Screen Info:
Moves: A counter for the number of pairs flipped (e.g., "Attempts: 12").
Time: A running timer showing elapsed seconds.
Pairs Found: A progress indicator (e.g., "Pairs: 4 / 8").
6. Pygame Technical Specifications
Display:
Window Size: A square aspect ratio is ideal, e.g., 800x800 or 720x720.
Grid Layout: The game board should be centered with padding. Calculate card positions and gaps dynamically based on grid size (e.g., 4x4, 6x6).
Game Loop:
Requires a standard game loop running at a consistent FPS (e.g., 60 FPS) to handle animations and timers smoothly.
Input Handling:
The primary task is to handle MOUSEBUTTONDOWN events.
Translate the pixel coordinates of the mouse click into grid coordinates (row, col) to identify which card was clicked. This is done via integer division: col = mouse_x // card_width.
Core Data Structures:
A 2D list or a single list representing the grid is essential.
Each element should be a Card object or dictionary containing its state:
id: The identifier for the symbol (e.g., "image1.png", "color_blue").
is_flipped: A boolean.
is_solved: A boolean.
rect: A pygame.Rect object for its position and size, used for drawing and collision detection (click checking).
Timers:
Use pygame.time.get_ticks() to manage the delay for non-matching pairs. When a second card is revealed, store the current time. In the main loop, check if pygame.time.get_ticks() - start_time > 1000 (for a 1-second delay) before flipping them back.
